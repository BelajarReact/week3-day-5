{"version":3,"sources":["App.js","actions/index.js","serviceWorker.js","reducers/counter.js","reducers/fetchtodo.js","reducers/index.js","index.js"],"names":["App","counter","useSelector","state","Todos","todos","dispatch","useDispatch","className","onClick","a","setTimeout","type","event","console","log","nilai","fetch","response","payload","json","fetchTodos","Boolean","window","location","hostname","match","action","combineReducers","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wRA2CeA,MAtCf,WACI,IAAMC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,WACrCG,EAAQF,aAAY,SAAAC,GAAK,OAAIA,EAAME,SACnCC,EAAWC,cAiBjB,OACI,yBAAKC,UAAU,OACX,+CAEA,yBAAKA,UAAU,WACX,yCAAeP,GACf,yBAAKO,UAAU,WACX,4BAAQA,UAAU,MAAMC,QAtBrB,WAChBH,ECaH,uCAAO,WAAOA,GAAP,SAAAI,EAAA,sDAEHC,YAAW,WACPL,EA3BgB,CACxBM,KAAM,cA4BC,KALA,2CAAP,yDDQgB,aACA,yBAAKJ,UAAU,OACf,4BAAQA,UAAU,OAAOC,QAnB5B,WACTH,ECJJ,uCAAO,WAAOA,GAAP,SAAAI,EAAA,sDAGHC,YAAW,WACPL,EAbU,CAClBM,KAAM,gBAcC,KANA,2CAAP,yDDsBgB,SAGP,4BAAQH,QAhBE,SAACI,GAChBC,QAAQC,IAAIX,GACZE,ECaD,SAAoBL,GACvB,8CAAO,WAAOK,GAAP,iBAAAI,EAAA,6DACGM,EAAQf,EAAU,EAAI,EAAGA,EAD5B,SAEqBgB,MAAM,8CAA8CD,GAFzE,OAEGE,EAFH,OAIHP,YAAW,WACPL,EAAS,CACLM,KAAM,WACNO,QAASD,EAASE,WAGvB,KAVA,2CAAP,sDDdaC,CAAWpB,MAcf,gBEzBOqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCFSzB,MAff,SAAiBE,EAAOwB,GACpB,GAAqB,qBAAVxB,EACP,OAAO,EAGX,OAAQwB,EAAOf,MACX,IAAK,YACD,OAAOT,EAAQ,EACnB,IAAK,UACD,OAAOA,EAAQ,EACnB,QACI,OAAOA,ICAJE,MAXf,SAAgBF,EAAMwB,GAClB,MAAqB,qBAAVxB,EACA,GAEQ,aAAfwB,EAAOf,KACCe,EAAOR,QAGZQ,GCLIC,cAAgB,CAAC3B,UAAQI,UCSlCwB,EAAQC,YAAYC,EAAQC,YAAgBC,MAElDC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,OAENO,SAASC,eAAe,SJgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.7ac5896f.chunk.js","sourcesContent":["import React from 'react';\nimport {useDispatch,useSelector} from 'react-redux';\nimport './App.css';\nimport {incrementAsync,decrementAsync,fetchTodos} from './actions'\n\nfunction App(){\n    const counter = useSelector(state => state.counter);\n    const Todos = useSelector(state => state.todos)\n    const dispatch = useDispatch();\n\n    const _OnSubstract=() =>{\n       dispatch(decrementAsync());\n\n\n    }\n    const _OnAdd=() =>{\n        dispatch(incrementAsync());\n\n\n    }\n\n    const _onFetchApi =(event) =>{\n        console.log(Todos)\n        dispatch(fetchTodos(counter))\n    }\n    return(\n        <div className=\"App\">\n            <h1>Counter Buttons</h1>\n\n            <div className=\"counter\">\n                <h3>Counter : {counter}</h3>\n                <div className=\"buttons\">\n                    <button className=\"min\" onClick={_OnSubstract}>Substract</button>\n                    <div className=\"or\"></div>\n                    <button className=\"plus\" onClick={_OnAdd}>Add</button>\n                </div>\n            </div>\n             <button onClick={_onFetchApi}>Fetch Api </button>\n\n        </div>\n    )\n}\n\nexport default App;","const _OnSubstract = () => ({\n    type: 'KURANGI'\n})\nconst _OnAdd = () => ({\n    type: 'TAMBAHKAN'\n})\n\nconst nilai = 1;\n\nexport function incrementAsync() {\n\n\n    return async (dispatch) => {\n\n\n        setTimeout(() => {\n            dispatch(_OnAdd());\n\n        }, 200);\n    }\n}\n\nexport function decrementAsync() {\n\n    return async (dispatch) => {\n\n        setTimeout(() => {\n            dispatch(_OnSubstract());\n\n        }, 200);\n    }\n}\n\n\n\n\nexport function fetchTodos(counter) {\n    return async (dispatch) => {\n        const nilai = counter < 1 ? 1 :counter;\n        const response = await  fetch('https://jsonplaceholder.typicode.com/todos/'+nilai);\n\n        setTimeout(() => {\n            dispatch({\n                type: 'GET_DATA',\n                payload: response.json()\n            })\n\n        }, 200);\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nfunction counter(state, action) {\n    if (typeof state === 'undefined') {\n        return 0\n    }\n\n    switch (action.type) {\n        case 'TAMBAHKAN':\n            return state + 1\n        case 'KURANGI':\n            return state - 1\n        default:\n            return state\n    }\n}\n\nexport default counter;","\nfunction  todos(state,action){\n    if (typeof state === 'undefined') {\n        return ''\n    }\n    if (action.type ==='GET_DATA'){\n        return  action.payload;\n    }\n\n    return action\n}\n\nexport default todos;","import {combineReducers} from 'redux';\nimport counter from './counter'\nimport todos from './fetchtodo'\n\nexport default combineReducers({counter,todos});","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport {createStore,applyMiddleware} from 'redux';\nimport reducer from './reducers';\n\nconst store = createStore(reducer,applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}